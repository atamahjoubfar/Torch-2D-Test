-- To run this code, open a new iTorch notebook
-- at the same directory as this file,
-- and run this command:
-- require "data"
-- or
-- dofile "data.lua"
-- the first one caches the file, but not the second one
Plot = require 'itorch.Plot'
-- This is the number of data points:
N = 1000
--[[ First we make a set of random data points.
torch.rand(dim1,dim2) generates a dim1 x dim2 tensor with uniformrandom numbers 
--]]
RM3 = torch.rand(2,N):mul(2.3)
-- :mul multiplies the tensor generated by torch. 

-- The polynomial function code is obtained from:
-- https://github.com/xfbs/PiL3/blob/master/06MoreAboutFunctions/polynomial.lua
function polynomial(coefficients)
    return function(x)
        y = 0
        cur_x = 1
        for i = #coefficients, 1, -1 do
            y = y + cur_x * coefficients[i]
            if i ~= 1 then cur_x = cur_x * x end
        end
        return y
    end
end

f = polynomial{1, -2.3, 1.32, 0.82}

xv = {}
yv = {}
i = 0
for x = 0,2.01,0.01 do
    i = i+1
    xv[i]=x
    yv[i]=f(x)
end

RMP = {}
RMP[1] = {}
RMP[2] = {}
RMN = {}
RMN[1] = {}
RMN[2] = {}
for i = 1,N do
    if (RM3[2][i] > f(RM3[1][i])) then
        table.insert(RMP[1], RM3[1][i])
        table.insert(RMP[2], RM3[2][i])
    else
        table.insert(RMN[1], RM3[1][i])
        table.insert(RMN[2], RM3[2][i])
    end
end

plot = Plot():circle(RMP[1],RMP[2], 'green', 'Positive')
plot:circle(RMN[1],RMN[2], 'red', 'Negative')
plot:line(xv, yv, 'black', 'Ideal'):draw()

